{"version":3,"sources":["stores/talk.ts","stores/index.ts","components/Header.tsx","components/MessageView.tsx","components/Chat.tsx","data/index.ts","hooks/useStamp.ts","components/Stamp.tsx","App.tsx","index.tsx"],"names":["talkSlice","createSlice","name","initialState","messages","reducers","reset","state","appendMessage","action","payload","id","length","push","store","configureStore","reducer","talk","useSelector","rawUseSelector","useStyles","makeStyles","theme","createStyles","bar","backgroundColor","menuButton","marginRight","spacing","title","flexGrow","fontWeight","Header","classes","AppBar","position","className","Toolbar","variant","IconButton","edge","color","ArrowBackIos","Typography","PhoneOutlined","Menu","today","borderRadius","margin","padding","MessageView","message","Grid","container","justify","text","root","overflow","backgroundImage","backgroundSize","Chat","map","stamps","useStamp","dispatch","rawUseDispatch","stamp","side","isStamp","actions","gridWrapper","stampGrid","imgWrapper","width","paddingTop","img","top","left","height","objectFit","button","cursor","borderStyle","Stamp","onClickStamp","alignItems","ArrowDropDown","direction","item","xs","src","alt","type","onClick","userSelect","paper","display","flexDirection","App","Container","maxWidth","Paper","elevation","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb17e905.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type Message = {\n  id?: number;\n  side: 'left' | 'right';\n  name: string;\n  isStamp: boolean;\n  text: string;\n  time?: string;\n};\n\nexport interface TalkState {\n  name: string;\n  messages: Message[];\n  // scenario: {\n  //   [string]: ;\n  // }\n}\n\nconst initialState: TalkState = {\n  name: 'さくら学院スタンプ',\n  messages: [],\n};\n\nexport const talkSlice = createSlice({\n  name: 'talk',\n  initialState,\n  reducers: {\n    reset: (state) => {\n      state.messages = [];\n    },\n    appendMessage: (state, action: PayloadAction<Message>) => {\n      action.payload.id = state.messages.length;\n      state.messages.push(action.payload);\n    },\n  },\n});\n\n// export const { actions } = talkSlice;\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  useDispatch as rawUseDispatch,\n  useSelector as rawUseSelector,\n  TypedUseSelectorHook,\n} from 'react-redux';\nimport { talkSlice } from './talk';\n\nexport const store = configureStore({\n  reducer: {\n    talk: talkSlice.reducer,\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useDispatch = () => rawUseDispatch<AppDispatch>();\nexport const useSelector: TypedUseSelectorHook<RootState> = rawUseSelector;\n","import { VFC } from 'react';\nimport { AppBar, IconButton, Toolbar, Typography } from '@material-ui/core';\nimport { ArrowBackIos, Menu, PhoneOutlined } from '@material-ui/icons';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useSelector } from '../stores';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    bar: {\n      backgroundColor: '#234',\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      fontWeight: 700,\n    },\n  })\n);\n\nconst Header: VFC = () => {\n  const classes = useStyles();\n  const title = useSelector((state) => state.talk.name);\n\n  return (\n    <AppBar position=\"static\" className={classes.bar}>\n      <Toolbar variant=\"dense\">\n        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\">\n          <ArrowBackIos />\n        </IconButton>\n        <Typography variant=\"body1\" className={classes.title}>\n          {title}\n        </Typography>\n        <IconButton color=\"inherit\">\n          <PhoneOutlined />\n        </IconButton>\n        <IconButton color=\"inherit\">\n          <Menu />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import { VFC } from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Message } from '../stores/talk';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    today: {\n      backgroundColor: 'white',\n      borderRadius: 16,\n      margin: '8px 0',\n      padding: '4px 12px',\n    },\n  })\n);\n\ntype Props = {\n  message: Message;\n};\n\nconst MessageView: VFC<Props> = ({ message }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Grid container justify=\"center\">\n      <Typography className={classes.today} variant=\"caption\">\n        {message.text} {message.id}\n      </Typography>\n    </Grid>\n  );\n};\n\nexport default MessageView;\n","import { VFC } from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from '../stores';\nimport MessageView from './MessageView';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      overflow: 'scroll',\n      backgroundImage: 'url(line_background.jpg)',\n      backgroundSize: 'cover',\n    },\n    today: {\n      backgroundColor: '#516787',\n      color: 'white',\n      borderRadius: 16,\n      margin: '8px 0',\n      padding: '4px 12px',\n    },\n  })\n);\n\nconst Chat: VFC = () => {\n  const classes = useStyles();\n  const messages = useSelector((state) => state.talk.messages);\n\n  return (\n    <div className={classes.root}>\n      <Grid container justify=\"center\">\n        <Typography className={classes.today} variant=\"caption\">\n          今日\n        </Typography>\n      </Grid>\n      {messages.map((message) => (\n        <MessageView message={message} key={message.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default Chat;\n","export const stamps = [\n  'tehe',\n  'nasuo',\n  'dame',\n  'shirangana',\n  'sonnakoto',\n  'gungun',\n  'otome',\n  'mukako',\n  '9',\n  '10',\n  '11',\n  '12',\n] as const;\n\nexport type Stamps = typeof stamps[number];\n","import { useDispatch } from '../stores';\nimport { talkSlice, Message } from '../stores/talk';\nimport { Stamps } from '../data/index';\n\nconst useStamp = (): ((stamp: Stamps) => void) => {\n  const dispatch = useDispatch();\n  const onClickStamp = (stamp: Stamps) => {\n    const message: Message = {\n      side: 'right',\n      name: stamp,\n      isStamp: true,\n      text: stamp,\n    };\n    dispatch(talkSlice.actions.appendMessage(message));\n  };\n  return onClickStamp;\n};\n\nexport default useStamp;\n","import { VFC } from 'react';\nimport { Grid, Typography } from '@material-ui/core';\nimport { ArrowDropDown } from '@material-ui/icons';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { stamps } from '../data/index';\nimport useStamp from '../hooks/useStamp';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      backgroundColor: 'white',\n    },\n    title: {\n      backgroundColor: '#234',\n      color: 'white',\n      padding: 8,\n      fontWeight: 700,\n    },\n    gridWrapper: {\n      padding: '0 16px',\n    },\n    stampGrid: {\n      padding: 8,\n    },\n    imgWrapper: {\n      width: '100%',\n      position: 'relative',\n      overflow: 'hidden',\n      paddingTop: '100%',\n    },\n    img: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      objectFit: 'cover',\n    },\n    button: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      backgroundColor: 'transparent',\n      color: 'transparent',\n      cursor: 'pointer',\n      padding: 0,\n      borderStyle: 'none',\n    },\n  })\n);\n\nconst Stamp: VFC = () => {\n  const classes = useStyles();\n  const onClickStamp = useStamp();\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        justify=\"center\"\n        alignItems=\"center\"\n        className={classes.title}\n      >\n        <Typography variant=\"body1\">スタンプ</Typography>\n        <ArrowDropDown />\n      </Grid>\n      <div className={classes.gridWrapper}>\n        <Grid container direction=\"row\" justify=\"center\">\n          {stamps.map((stamp) => (\n            <Grid item xs={3} key={stamp}>\n              <div className={classes.stampGrid}>\n                <div className={classes.imgWrapper}>\n                  <img\n                    src={`stamps/${stamp}.jpg`}\n                    alt={stamp}\n                    className={classes.img}\n                  />\n                  <button\n                    type=\"button\"\n                    className={classes.button}\n                    onClick={() => onClickStamp(stamp)}\n                  >\n                    {' '}\n                  </button>\n                </div>\n              </div>\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default Stamp;\n","import { VFC } from 'react';\nimport { Container, Paper } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Header from './components/Header';\nimport Chat from './components/Chat';\nimport Stamp from './components/Stamp';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      flexGrow: 1,\n      padding: 0,\n      userSelect: 'none',\n    },\n    paper: {\n      height: '100vh',\n      '@supports (-webkit-touch-callout: none)': {\n        height: '-webkit-fill-available',\n      },\n      display: 'flex',\n      flexDirection: 'column',\n    },\n  })\n);\n\nconst App: VFC = () => {\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"xs\" className={classes.container}>\n      <Paper className={classes.paper} elevation={2}>\n        <Header />\n        <Chat />\n        <Stamp />\n      </Paper>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './stores';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}